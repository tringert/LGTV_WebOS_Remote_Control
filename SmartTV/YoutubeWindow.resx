<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AKoAAAD+AAAA3QAAACkAAAAGAAAAJAAAAOMAAAD+AAAA9wAAABcAAAAAAAAAAAAAAAAAAAAAAAAAXQAA
        AP0AAADJAAAAoAAAACoAAAAAAAAAbgAAAKQAAADvAAAA/gAAAP4AAAD+AAAA/gAAAP4AAAAQAAAAAAAA
        ANoAAAD6AAAA/gAAAP4AAAD+AAAA+QAAAOgAAAD4AAAA/gAAAP4AAAD3AAAADwAAAAAAAAAAAAAAAAAA
        AAAAAABSAAAA/AAAAGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM4AAAD+AAAA/gAAAP4AAAD+AAAA/gAA
        ABAAAAAAAAAA2gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAPQAAAAEAAAAAAAA
        AAAAAAAAAAAAAAAAADoAAAD6AAAAiwAAADwAAAA8AAAAPAAAADwAAAA8AAAA2wAAAP4AAAD+AAAA/gAA
        AP4AAAD+AAAASwAAADwAAADlAAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAAxgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAMYAAAD9AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAA
        AP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAA
        APEAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAALUAAAD+AAAA/gAAAP4AAAD+AAAA/gAA
        AP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4AAAD+AAAA/gAA
        AP4AAAD5AAAAXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAADsAAABcAAAAZwAA
        AG4AAAB0AAAAeQAAAH0AAACAAAAAgQAAAIIAAACDAAAAggAAAIIAAACAAAAAfwAAAHsAAAB3AAAAcgAA
        AGsAAABiAAAAUgAAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAKkAAABqAAAAAAAAAAIAAAB7AAAAzwAAAMwAAAB1AAAAAQAA
        AAgAAACvAAAAoQAAAGkAAACqAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6AAAA9gAAAJoAAAAAAAAAQAAAAP0AAADGAAAAzgAA
        AP0AAAA2AAAAPgAAAP4AAADjAAAA8QAAAPcAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADoAAAD2AAAAmgAAAAAAAABkAAAA+gAA
        AEEAAABHAAAA/AAAAFYAAABEAAAA/gAAAD4AAAB4AAAA9wAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOgAAAPYAAACaAAAAAAAA
        AGcAAAD6AAAAQAAAAEQAAAD8AAAAVwAAAEQAAAD+AAAAOwAAAGUAAAD3AAAAMAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6AAAA9gAA
        AJoAAAAAAAAAZwAAAPoAAABAAAAARAAAAPwAAABXAAAARAAAAP4AAAA7AAAAZQAAAPcAAAAwAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AFgAAAD7AAAAsQAAAAAAAABnAAAA+gAAAEAAAABEAAAA/AAAAFcAAABEAAAA/gAAADsAAABlAAAA9wAA
        ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAoAAAAP4AAADoAAAAAAAAAGcAAAD6AAAAQAAAAEQAAAD8AAAAVwAAAEQAAAD+AAAAOwAA
        AGUAAAD3AAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAcAAADoAAAAtQAAAPsAAABKAAAAUQAAAPwAAACZAAAAnQAAAP0AAAA9AAAARAAA
        AP4AAAA7AAAAZQAAAPcAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAATQAAAP0AAAA7AAAA2QAAAL0AAAABAAAAswAAAPgAAAD4AAAAlQAA
        AAAAAABCAAAA9wAAADoAAABhAAAA8AAAAC8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA6QAAABIAAACmAAAA9gAAABoAAAADAAAAKAAA
        ACcAAAADAAAAAAAAAAMAAAAPAAAAAgAAAAUAAAAOAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAANkAAADHAAAACAAAAHMAAAD7AAAASgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABpAAAA7AAAAGcAAAADAAAAhwAA
        APMAAABCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////AAAB/gAAAP4AAAh+M+++fjPvtn4zbbZ+M22wfjNtvn4zbb5+M2
        22fjNvvn4zbxx+OAwAfvwMAH58DAB+AAAA/wAAAf//Af////////3nL//8ww///Ntv//zbb//822///N
        tv//jbb//4w2//+kNv//J////zf///9n//8=
</value>
  </data>
</root>